
// In this file, we perform the elimination step for the equation x^p + y^p = z^5 under the assumption 2 | ab and 5 \nmid ab with (a,b,c) being a solution of the generalized Fermat equation.


Q<z> := PolynomialRing(Rationals());
K<u> := NumberField(z^2 - z - 1);
RK<x> := PolynomialRing(K);
OK := RingOfIntegers(K);
q2 := SetToSequence(Support(2*OK))[1];
q5 := SetToSequence(Support(5*OK))[1];


Q5<z5> := ext<K | x^2 + u + 2>;
OQ5 := RingOfIntegers(Q5);



// Returns the list of possible traces of Frobenius on a GL_2 block over K.
function get_traceFrob(a,b,c,q,twist)

	Cab := QuadraticTwist(HyperellipticCurve(x^5 - 5*c^2*x^3 + 5*c^4*x - 2*(a-b)),twist);
	Q:=Factorization(q*OK)[1,1];

	Lf:=EulerFactor(Cab,Q);
	Lf:=Reverse(Lf);
	Lfactor:=Factorization(RK!Lf);
	traceFrob:=[-Coefficient(f[1],1) : f in Lfactor];

	return traceFrob;
end function;



function elimination_step_J_minus(decomp, primes, twist)
/*
	INPUT:
		- decomp : a list of newforms 
		- primes : a set of prime
		- forms : a list of numbers

	OUTPUT:
		The function returns `true` if the elimination works together with a set of small primes which do not succeed.
		If forms := [] then we deal with all newforms otherwise only with the ones in forms.
*/


if #decomp eq 0 then
  printf "Empty space of newforms!\n";
  return true;
end if;

RQ<z> := PolynomialRing(Rationals());
K := BaseField(decomp[1]);
RK<x> := PolynomialRing(K);
OK := RingOfIntegers(K);

el := true;


// we apply the elimination step
for i:=1 to #decomp do

	decompf:=decomp[i];
	newf := Eigenform(decompf);
	small_primes_newf := [];
	L := HeckeEigenvalueField(decompf);


	// This code will embed K into L so later comparisons do not type casting in Magma. The variable bol is not used.
	if Degree(L) gt 1 then
		bol, KtoL := IsSubfield(K,L);
	else
		L := K;
		bol, KtoL := IsSubfield(K,L);
	end if;
	
		
	for q in primes do
		qK_list := SetToSequence(Support(q*OK));
		aqfnew_list := [HeckeEigenvalue(newf,qK) : qK in qK_list];

		prodq := q;

		for a in [0 .. q-1] do
			for c in [0 .. q-1] do
				b := c^5 - a;

				if (a*b) mod q ne 0 then
	
					traceFrob := get_traceFrob(a,b,c,q,twist);

					if #traceFrob eq 1 then
						tr1 := traceFrob[1];
						nextprodq := Gcd([Integers()!Norm(tr1^2 - aqfnew^2) : aqfnew in aqfnew_list]);
					elif #traceFrob eq 1 and #aqfnew_list eq 1 then
						tr1 := traceFrob[1];
						aq1 := aqfnew_list[1];
						nextprodq := Integers()!Norm(tr1^2 - aq1^2);
					elif #traceFrob eq 2 and #aqfnew_list eq 2 then
							// note we do not know which trace corresponds to which prime of K so we consider the two possible permutations
						tr1 := traceFrob[1];
						tr2 := traceFrob[2];
						aq1 := aqfnew_list[1];
						aq2 := aqfnew_list[2];

						// we only know the traces up to an unramified quadratic character
						nextprodq := Gcd([Integers()!Norm(tr1^2 - aq1^2),Integers()!Norm(tr2^2 - aq2^2)])*Gcd([Integers()!Norm(tr1^2 - aq2^2),Integers()!Norm(tr2^2 - aq1^2)]);
					end if;

				else
	
					if LegendreSymbol(5,q) eq 1 then
						nextprodq := Gcd([Integers()!Norm(aqfnew^2 - (q + 1)^2) : aqfnew in aqfnew_list]);
					else			
						aqfnew := aqfnew_list[1];			
						nextprodq := Integers()!Norm(aqfnew^2 - (q^2 + 1)^2);
					end if;
				end if;

				prodq *:= nextprodq;


			end for;
		end for;

		Append(~small_primes_newf,Integers()!prodq);

	end for;

	gcd := GCD(small_primes_newf);

	if gcd ne 0 then
		printf "i = %o of %o, small exponents after elimination = %o\n",i,#decomp,PrimeFactors(gcd);
		el:=true;
				
	else
		printf "i = %o of %o failed using %o\n",i,#decomp,primes;
		el := false;
	end if;
end for;


return el;

end function;


// Compute the required spaces of Hilbert newforms for the Case (II)
N12 := q2 * q5^2;
N13 := q2 * q5^3;

time decomp12 := NewformDecomposition(NewSubspace(HilbertCuspForms(K, N12)));
time decomp13 := NewformDecomposition(NewSubspace(HilbertCuspForms(K, N13)));


// List of required twists to perform the elimination.

TwistList:=[1, -1, 2, -2, 2*u-2, -2*u-2, u-1, -u-1];


// Elimination step for the Case (II)
// For each twist, perform the elimination using that twist.
for d in TwistList do
	print "-> Performing elimination for twist by d = ", d;

  elimination_step_J_minus(decomp12, [3,7,11], d);
  elimination_step_J_minus(decomp13, [3,7,11], d);
end for;

